version: 2.1

orbs:
  aws-cli: circleci/aws-cli@4.0

jobs:
  build_and_test:
    docker:
      - image: circleci/python:3.8
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Build Docker Image
          command: |
            ls
            pwd
            cd src
            docker-compose build
      - run:
          name: Run Docker Compose
          command: |
            cd src
            docker-compose down
            docker-compose --compatibility up -d
      - run:
          name: Wait for Services to Start
          command: sleep 3
      - run:
          name: Run Tests
          command: |
            cd src
            docker ps 
            # bash ./tests/unittest.sh
      - run:
          name: Notify Discord of Success
          when: on_success
          command: |
            curl -H "Content-Type: application/json" -X POST -d '{"content": "Build and tests succeeded for project kojoey/weather"}' $DISCORD_WEBHOOK_URL
      - run:
          name: Notify Discord of Failure
          when: on_fail
          command: |
            curl -H "Content-Type: application/json" -X POST -d '{"content": "Build and tests failed for project kojoey/weather"}' $DISCORD_WEBHOOK_URL
      - run:
          name: Docker Compose Down
          command: |
            cd src
            docker-compose down

  publish:
    docker:
      - image: circleci/python:3.8
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Build Docker Image
          command: |
            cd src
            docker-compose build
      - run:
          name: Login to GitLab Container Registry
          command: |
            echo $GITLAB_TOKEN | docker login -u $GITLAB_USER --password-stdin $GITLAB_REGISTRY
      - run:
          name: Tag and Push Docker Image
          command: |
            IMAGE_NAME=${GITLAB_REGISTRY}/${GITLAB_PROJECT}:latest
            docker tag src_gunicorn:latest $IMAGE_NAME
            docker push $IMAGE_NAME
            
  terraform:
    docker:
      - image: hashicorp/terraform:latest
    steps:
      - checkout
      - aws-cli/setup:
      #     aws-access-key-id: AWS_ACCESS_KEY_ID
      #     aws-secret-access-key: AWS_SECRET_ACCESS_KEY
      #     aws-region: AWS_DEFAULT_REGION
      - run:
          name: Install Dependencies
          command: |
            apk update && apk add --no-cache python3 py3-pip git
            python3 -m venv /path/to/venv
            . /path/to/venv/bin/activate
            pip install checkov
            wget https://golang.org/dl/go1.16.3.linux-amd64.tar.gz
            tar -C /usr/local -xzf go1.16.3.linux-amd64.tar.gz
            export PATH=$PATH:/usr/local/go/bin
            go get -v github.com/gruntwork-io/terratest/modules/terraform
      - run:
          name: Checkov - Scan Terraform Code
          command: |
            . /path/to/venv/bin/activate
            checkov -d ./terraform/eks
      - run:
          name: Terraform Init
          command: |
            cd ./terraform/eks
            terraform init
      # - run:
      #     name: Terratest
      #     command: |
      #       cd ./terraform/eks/tests
      #       go test -v
      # - run:
      #     name: Terraform Apply
      #     command: |
      #       cd ./terraform/eks
      #       terraform apply -auto-approve


workflows:
  version: 2
  weather:
    jobs:
      # - build_and_test
      # - publish:
      #     requires:
      #       - built_and_test
      - terraform
