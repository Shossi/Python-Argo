version: 2.1

orbs:
  aws-cli: circleci/aws-cli@4.0
  terraform: circleci/terraform@3.2.0
  go: circleci/go@1.11.0
  helm: circleci/helm@3.0.2
  kubernetes: circleci/kubernetes@1.3.0

jobs:
  build_and_test:
    docker:
      - image: circleci/python:3.8
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Build Docker Image
          command: |
            ls
            pwd
            cd src
            docker-compose build
      - run:
          name: Run Docker Compose
          command: |
            cd src
            docker-compose down
            docker-compose --compatibility up -d
      - run:
          name: Wait for Services to Start
          command: sleep 3
      - run:
          name: Run Tests
          command: |
            cd src
            docker ps 
            # bash ./tests/unittest.sh
      - run:
          name: Notify Discord of Success
          when: on_success
          command: |
            curl -H "Content-Type: application/json" -X POST -d '{"content": "Build and tests succeeded for project kojoey/weather"}' $DISCORD_WEBHOOK_URL
      - run:
          name: Notify Discord of Failure
          when: on_fail
          command: |
            curl -H "Content-Type: application/json" -X POST -d '{"content": "Build and tests failed for project kojoey/weather"}' $DISCORD_WEBHOOK_URL
      - run:
          name: Docker Compose Down
          command: |
            cd src
            docker-compose down

  publish:
    docker:
      - image: circleci/python:3.8
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Build Docker Image
          command: |
            cd src
            docker-compose build
      - run:
          name: Login to GitLab Container Registry
          command: |
            echo $GITLAB_TOKEN | docker login -u $GITLAB_USER --password-stdin $GITLAB_REGISTRY
      - run:
          name: Tag and Push Docker Image
          command: |
            IMAGE_NAME=${GITLAB_REGISTRY}/${GITLAB_PROJECT}:latest
            docker tag src_gunicorn:latest $IMAGE_NAME
            docker push $IMAGE_NAME

  terraform:
    docker:
      - image: circleci/python:3.8
    steps:
      - checkout
      - aws-cli/setup
      - terraform/install
      - kubernetes/install
      - go/install:
          version: "1.18"
      - run:
          name: Install Dependencies
          command: |
            apt-get update && apt-get install -y python3-pip
            pip3 install checkov
            
      - run:
          name: Checkov - Scan Terraform Code
          command: checkov -d ./terraform/eks --skip-check CKV_TF_1,CKV_TF_2
          
      - terraform/init:
          path: ./terraform/eks
          
      - run:
          name: Initialize Go Module
          command: |
            cd terraform/eks/tests
            go mod init terraform-eks-tests
            go get github.com/gruntwork-io/terratest/modules/terraform
            go get github.com/stretchr/testify/assert
            
#      - run:
#          name: TerraTest
#          command: |
#            cd terraform/eks/tests
#            go test -v -timeout 40m
      - terraform/apply:
           path: ./terraform/eks
      - run:
          name: connect to cluster
          command: |
            aws eks update-kubeconfig --name eks-yossi-project
      - run:
          name: Install Helm
          command: |
            curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
      - run:
          name: Build Helm Dependencies
          command: |
            helm repo add dandydeveloper https://dandydeveloper.github.io/charts/
            helm repo update
            helm dependency build ./argo-cd
      - run:
          name: Deploy ArgoCD with Helm
          command: |
            helm upgrade --install argocd ./argo-cd --namespace argocd --create-namespace
      - run:
          name: Install ArgoCD CLI
          command: |
            curl -sSL -o argocd-linux-amd64 https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
            sudo install -m 555 argocd-linux-amd64 /usr/local/bin/argocd
            rm argocd-linux-amd64
      - run:
          name: Wait for ArgoCD to be Ready
          command: |
            kubectl wait --for=condition=available --timeout=600s deployment/argocd-server -n argocd

      - run:
          name: Login to ArgoCD
          command: |
            ARGOCD_ADMIN_PASSWORD=$(kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 --decode)
            echo $ARGOCD_ADMIN_PASSWORD
            ARGOCD_SERVER=$(kubectl -n argocd get svc argocd-server -o jsonpath="{.status.loadBalancer.ingress[0].hostname}")
            echo $ARGOCD_SERVER
            argocd login $ARGOCD_SERVER --username admin --password $ARGOCD_ADMIN_PASSWORD --insecure
      - run:
          name: Create ArgoCD Application
          command: |
            argocd app create weather \
            --repo https://github.com/Shossi/Python-Argo \
            --path ./helm-chart \
            --dest-server https://kubernetes.default.svc \
            --dest-namespace default \
            --sync-policy automated


workflows:
  version: 2
  weather:
    jobs:
      - build_and_test
      - publish:
        requires:
        - build_and_test
#      - terraform
